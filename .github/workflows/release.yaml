# Stolen from https://github.com/BurntSushi/ripgrep/blob/7099e174acbcbd940f57e4ab4913fee4040c826e/.github/workflows/release.yml
# -----------

# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: release
on:
  push:
    branches:
    - test_release
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      rel_version: ${{ env.REL_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: Get the release version from the tag
        shell: bash
        if: env.REL_VERSION == ''
        run: |
          echo "REL_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "version is: ${{ env.REL_VERSION }}"
      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create ${{ env.REL_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    permissions: write-all
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, macos, win-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --verbose --release

    - name: Strip release binary (linux, macos and macos-arm)
      if: matrix.build == 'linux' || matrix.os == 'macos'
      run: strip "target/release/zw_to_anki"

    - name: Build archive
      shell: bash
      run: |
        staging="zw_to_anki-${{ needs.create-release.outputs.rel_version }}-${{ matrix.target }}"
        mkdir -p "$staging"

        cp README.md "$staging/"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/release/zw_to_anki.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          certutil -hashfile "$staging.zip" SHA256 > "$staging.zip.sha256"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$staging.zip.sha256" >> $GITHUB_ENV
        else
          # The man page is only generated on Unix systems. ¯\_(ツ)_/¯
          cp "target/release/zw_to_anki" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          shasum -a 256 "$staging.tar.gz" > "$staging.tar.gz.sha256"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$staging.tar.gz.sha256" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      env:
        GH_TOKEN: ${{ github.token }}
      run: gh release upload ${{ needs.create-release.outputs.rel_version }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}